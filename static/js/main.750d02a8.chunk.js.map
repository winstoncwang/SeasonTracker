{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","class","size","loaderMsg","defaultPros","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","message","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"2MAIMA,G,MAAe,CACpBC,OAAS,CACRC,KAAW,sBACXC,SAAW,OAEZC,OAAS,CACRF,KAAW,qBACXC,SAAW,eAwBEE,EAZO,SAACC,GACtB,IATkBC,EAAKC,EASjBC,GATYF,EASOD,EAAMC,KATRC,GASa,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACjBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIG,EAELP,EAAaS,GAAhCP,EAFwB,EAExBA,KAAMC,EAFkB,EAElBA,SACd,OACC,yBAAKS,UAAS,yBAAoBH,IACjC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BTU,EAAS,SAACP,GACf,OACC,yBAAKQ,MAAM,oBACV,yBAAKA,MAAK,aAAQR,EAAMS,KAAd,iBAAmCT,EAAMU,aAKtDH,EAAOI,YAAc,CACpBD,UAAY,aACZD,KAAY,UAGEF,QCTTK,E,4MACLC,MAAQ,CAAEZ,IAAK,KAAMa,aAAc,I,kEAGb,IAAD,OACpBC,OAAOC,UAAUC,YAAYC,oBAC5B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEnB,IAAKkB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAW,EAAKH,SAAS,CAAEN,aAAcS,EAAMC,e,sCAOhD,OAAIC,KAAKZ,MAAMC,eAAiBW,KAAKZ,MAAMZ,IACnC,+CAAqBwB,KAAKZ,MAAMC,eAGnCW,KAAKZ,MAAMC,cAAgBW,KAAKZ,MAAMZ,IACnC,kBAAC,EAAD,CAAeA,IAAKwB,KAAKZ,MAAMZ,MAItC,kBAAC,EAAD,CACCS,UAAU,qCACVD,KAAK,Y,+BAOP,OAAO,yBAAKH,UAAU,cAAcmB,KAAKC,qB,GAhCzBC,IAAMC,WAoCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.750d02a8.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n//import ReactDOM from 'react-dom';\n\nconst seasonConfig = {\n\tsummer : {\n\t\ttext     : \"Let's hit the beach\",\n\t\ticonName : 'sun'\n\t},\n\twinter : {\n\t\ttext     : 'Burr, it is chilly',\n\t\ticonName : 'snowflake'\n\t}\n};\n\nconst getSeason = (lat, month) => {\n\tif (month > 2 && month < 9) {\n\t\treturn lat > 0 ? 'summer' : 'winter';\n\t} else {\n\t\treturn lat < 0 ? 'winter' : 'summer';\n\t}\n};\n\nconst SeasonDisplay = (props) => {\n\tconst season = getSeason(props.lat, new Date().getMonth());\n\tconst { text, iconName } = seasonConfig[season];\n\treturn (\n\t\t<div className={`season-display ${season}`}>\n\t\t\t<i className={`icon-left massive ${iconName} icon`} />\n\t\t\t<h1>{text}</h1>\n\t\t\t<i className={`icon-right massive ${iconName} icon`} />\n\t\t</div>\n\t);\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Loader = (props) => {\n\treturn (\n\t\t<div class=\"ui active dimmer\">\n\t\t\t<div class={`ui ${props.size} text loader`}>{props.loaderMsg}</div>\n\t\t</div>\n\t);\n};\n\nLoader.defaultPros = {\n\tloaderMsg : 'Loading...',\n\tsize      : 'medium'\n};\n\nexport default Loader;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Loader from './Loader';\n\n//class component\nclass App extends React.Component {\n\tstate = { lat: null, errorMessage: '' }; //initial state object METHOD 2\n\n\t//component lifecycle method\n\tcomponentDidMount () {\n\t\twindow.navigator.geolocation.getCurrentPosition(\n\t\t\t(position) => this.setState({ lat: position.coords.latitude }),\n\t\t\t(error) => this.setState({ errorMessage: error.message })\n\t\t);\n\t}\n\n\t//helper function\n\trenderContent () {\n\t\t//conditional rendering\n\t\tif (this.state.errorMessage && !this.state.lat) {\n\t\t\treturn <div>Error Message: {this.state.errorMessage}</div>;\n\t\t}\n\n\t\tif (!this.state.errorMessage && this.state.lat) {\n\t\t\treturn <SeasonDisplay lat={this.state.lat} />; //using child component\n\t\t}\n\n\t\treturn (\n\t\t\t<Loader\n\t\t\t\tloaderMsg=\"Please accept the location request\"\n\t\t\t\tsize=\"large\"\n\t\t\t/>\n\t\t);\n\t}\n\n\t//REQUIRED render always!!!!\n\trender () {\n\t\treturn <div className=\"border red\">{this.renderContent()}</div>;\n\t}\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}